name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Setup terraform CLI
    # https://github.com/marketplace/actions/hashicorp-setup-terraform
    - name: Setup terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.7.5

    # Setup tfcmt
    - name: Setup tfcmt
      uses: shirakiya/setup-tfcmt@v1
      with:
        # Version Spec of to use. See tfcmt releases
        # https://github.com/suzuki-shunsuke/tfcmt/releases
        version: v4.3.0

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Validates the Terraform files
    - name: terraform validate
      run: terraform validate

    # TFlint
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: v0.50.3

    - name: TFlint
      run: |
        tflint --config $GITHUB_WORKSPACE/.tflint.hcl --init
        tflint --config $GITHUB_WORKSPACE/.tflint.hcl --format=checkstyle

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: tfcmt plan -- terraform plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: tfcmt apply -- terraform apply -auto-approve -input=false
